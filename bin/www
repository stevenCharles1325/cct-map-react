#!/usr/bin/env node

/**
 * Module dependencies.
*/

var fs = require('fs');
var os = require('os');
var path = require('path');
var cluster = require('cluster');
var mongoose = require('mongoose');
var { createTerminus } = require('@godaddy/terminus');

var app = require('../app');
var auth = require('../auth');

var http = require('http');

var debug = require('debug')('server:server');

var cpuLenght = os.cpus().length;

var options = {
  key: fs.readFileSync( path.join(__dirname, '/.key') ),
  cert: fs.readFileSync( path.join(__dirname, '/.cert') )
};


/**
 * Get port from environment and store in Express.
*/

// Request port
var port = normalizePort(process.env.PORT || '3500');
app.set('port', port);
// app.set('secPort', 4443);


// Authentication port
var authPort = normalizePort(process.env.PORT || '4000');
auth.set('port', authPort);
// auth.set('secPort', 4444);


// Clustering
if( cluster.isMaster ){
  
  for(var i = 0; i < cpuLenght; i++){
    cluster.fork();
  }

  cluster.on('exit', (worker, code, signal) => {
    if( signal ){
      console.log(`Worker [${worker.process.pid}] killed by signal [${ signal }]`);
    }
    else if( code !== 0 ){
      console.log(`Worker [${worker.process.pid}] exited with error code [${ code }]`);
    }
    else{
      console.log(`Worker [${worker.process.pid}] died`);      
    }

    cluster.fork();
  });
}
else{
  var server = http.createServer(app);
  var authServer = http.createServer(auth);

  const terminusOption = {
    healthChecks: {
      '/healthCheck': healthCheck,
      verbatim: true,
      _ussafeExposeStackTraces: true
    },
    onSignal,
    onShutdown
  };

  createTerminus(server, terminusOption);
  createTerminus(authServer, terminusOption);

  /**
   * Listen on provided port, on all network interfaces.
   */

  // unsecure
  authServer.listen(authPort, () => {
    console.log(`listening on port: ${authPort}`);
  });

  server.listen(port, () => {
    console.log(`listening on port: ${port}`);
  });


  // Secure
  // secureServer.listen(app.get('secPort'), () => {
  //   console.log(`listening on port: ${ app.get('secPort') }`);
  // });
 
  // secureAuthServer.listen(auth.get('secPort'), () => {
  //   console.log(`listening on port: ${ auth.get('secPort') }`);
  // });

  // =========================== UNSECURED ============================
  // MAIN: Request server
  server.on('error', onError);
  server.on('listening', onServerListening);


  // Authentication server
  authServer.on('error', onError);
  authServer.on('listening', onAuthServerListening);

  // =====================================================================


  // ============================== SECURED ==============================

  // MAIN: Request server
  // secureServer.on('error', onError);
  // secureServer.on('listening', onSecureServerListening);


  // // Authentication server
  // secureAuthServer.on('error', onError);
  // secureAuthServer.on('listening', onSecureAuthServerListening);

  // ======================================================================

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onServerListening(){
    var addr = server.address();

    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind); 
  }

  function onAuthServerListening(){
    var authAddr = authServer.address();

    var bind = typeof authAddr === 'string'
      ? 'pipe ' + authAddr
      : 'port ' + authAddr.port;
    debug('Listening on ' + bind); 
  }
}



function onSignal() {
  console.log('Server is starting to clean up');
}

function onShutdown() {
  console.log('Server is cleaned up, will now shutdown');
}

function healthCheck({ state }) {
  if( state.isShuttingDown ){
    console.log('Server is shutting down');
  }
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

