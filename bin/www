#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs');
var path = require('path');
var app = require('../app');
var auth = require('../auth');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');


var options = {
  key: fs.readFileSync( path.join(__dirname, '/91517924_cct-map.key') ),
  cert: fs.readFileSync( path.join(__dirname, '/91517924_cct-map.cert') )
};

/**
 * Get port from environment and store in Express.
 */

// Request port
var port = normalizePort(process.env.PORT || '3500');
app.set('port', port);
app.set('secPort', 4443);


// Authentication port
var authPort = normalizePort(process.env.PORT || '4000');
auth.set('port', authPort);
auth.set('secPort', 4444);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var authServer = http.createServer(auth);

var secureServer = https.createServer(options, app);
var secureAuthServer = https.createServer(options, auth);


/**
 * Listen on provided port, on all network interfaces.
 */

// =========================== NOT SECURED ============================
// MAIN: Request server
server.listen(port, () => {
  console.log(`listening on port: ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);


// Authentication server
authServer.listen(authPort, () => {
  console.log(`listening on port: ${authPort}`);
});
authServer.on('error', onError);
authServer.on('listening', onListening);

// =====================================================================


// ============================== SECURED ==============================

// MAIN: Request server
secureServer.listen(app.get('secPort'), () => {
  console.log(`listening on port: ${ app.get('secPort') }`);
});
secureServer.on('error', onError);
secureServer.on('listening', onListening);


// Authentication server
secureAuthServer.listen(auth.get('secPort'), () => {
  console.log(`listening on port: ${ auth.get('secPort') }`);
});
secureAuthServer.on('error', onError);
secureAuthServer.on('listening', onListening);

// ======================================================================




/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
